import re
import csv
import matplotlib.pyplot as plt
import matplotlib.dates as mpl_dates
from datetime import datetime

# Read the data from the file
with open("D:\\DATA.TXT", "r", encoding="utf-8") as file:
    data = file.read()

# Normalize line endings
data = data.replace("\r\n", "\n")

# Define the regex pattern
pattern = r"(\d{2}:\d{2}:\d{2})\nLight Level: (\d+) Ohms\nDistance: ([\d.]+)cm\nTemperature: ([\d.]+)°C\nAcceleration X: ([-\d.]+)g\nAcceleration Y: ([-\d.]+)g\nAcceleration Z: ([-\d.]+)g\n={10,}"

# Find all matches
matches = re.findall(pattern, data)

if matches:
    # Write the extracted data to a CSV file
    with open("table.csv", "w", newline="", encoding="utf-8") as csvfile:
        csvwriter = csv.writer(csvfile)

        # Write the header row
        csvwriter.writerow(["Timestamp", "Light Level (Ohms)", "Distance (cm)",
                           "Temperature (°C)", "Acc X (g)", "Acc Y (g)", "Acc Z (g)"])

        # Iterate through the matches and write the data to the CSV file
        for match in matches:
            csvwriter.writerow(match)

    print("Data has been saved to table.csv.")

    # Print all the data in the CSV file
    with open("table.csv", "r", encoding="utf-8") as csvfile:
        csvreader = csv.reader(csvfile)

        for row in csvreader:
            print(row)

    # Create separate lists for each sensor reading
    timestamps = []
    light_levels = []
    distances = []
    temperatures = []
    acc_x = []
    acc_y = []
    acc_z = []
    energies = []
    power = []

    for match in matches:
        # Convert the timestamp string to a datetime object
        timestamp = datetime.strptime(match[0], "%H:%M:%S")
        timestamps.append(timestamp)

        light_level = int(match[1])
        light_levels.append(light_level)

        distance = float(match[2])
        distances.append(distance)

        temperature = float(match[3])
        temperatures.append(temperature)

        acc_x_val = float(match[4]) * 0.76
        acc_x.append(acc_x_val)

        acc_y_val = float(match[5]) * 0.76
        acc_y.append(acc_y_val)

        acc_z_val = float(match[6]) * 0.76
        acc_z.append(acc_z_val)

        # Calculate the estimated energy collected by the solar panels
        hours = timestamp.minute / 60 + timestamp.second / 3600
        energy = light_level * 0.20 * 1 * hours
        energies.append(energy)

        # Calculate the estimated power generated by the solar panels
        if len(energies) > 1:
            delta_energy = energies[-1] - energies[-2]
            delta_time = (timestamps[-1] - timestamps[-2]).total_seconds() / 3600
            power_val = delta_energy / delta_time
            power.append(power_val)

    # Create a figure with 2x3 subplots
    fig, axs = plt.subplots(2, 3, figsize=(20, 10))

    # Set the titles for each subplot
    axs[0, 0].set_title("Light Level (Ohms)")
    axs[0, 1].set_title("Distance (cm)")
    axs[0, 2].set_title("Temperature (°C)")
    axs[1, 0].set_title("Acc (Mars g)")
    axs[1, 1].set_title("Estimated Energy Collected (kWh)")
    axs[1, 2].set_title("Estimated Power Generated (kW)")
    
    # Plot the data for each sensor reading
    axs[0, 0].plot(timestamps, light_levels)
    axs[0, 1].plot(timestamps, distances)
    axs[0, 2].plot(timestamps, temperatures)
    
    axs[1, 0].plot(timestamps, acc_x, label="Acc X")
    axs[1, 0].plot(timestamps, acc_y, label="Acc Y")
    axs[1, 0].plot(timestamps, acc_z, label="Acc Z")
    axs[1, 0].legend(loc="upper left")
    
    axs[1, 1].plot(timestamps, energies)
    
    axs[1, 2].plot(timestamps[1:], power)
    
    # Format the x-axis labels for the subplots
    xfmt = mpl_dates.DateFormatter("%M:%S")
    axs[0, 0].xaxis.set_major_formatter(xfmt)
    axs[0, 1].xaxis.set_major_formatter(xfmt)
    axs[0, 2].xaxis.set_major_formatter(xfmt)
    axs[1, 0].xaxis.set_major_formatter(xfmt)
    axs[1, 1].xaxis.set_major_formatter(xfmt)
    axs[1, 2].xaxis.set_major_formatter(xfmt)
    
    # Rotate the x-axis labels for the subplots
    plt.setp(axs[0, 0].get_xticklabels(), rotation=45, ha="right")
    plt.setp(axs[0, 1].get_xticklabels(), rotation=45, ha="right")
    plt.setp(axs[0, 2].get_xticklabels(), rotation=45, ha="right")
    plt.setp(axs[1, 0].get_xticklabels(), rotation=45, ha="right")
    plt.setp(axs[1, 1].get_xticklabels(), rotation=45, ha="right")
    plt.setp(axs[1, 2].get_xticklabels(), rotation=45, ha="right")
    
    # Save the figure as a PNG file
    plt.savefig("mars_landing_data.png")
    
    print("Graphs have been saved to mars_landing_data.png.")
    
    